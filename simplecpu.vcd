$version Generated by VerilatedVcd $end
$date Thu Nov 24 11:10:13 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire 32 ] a0 [31:0] $end
  $var wire  1 [ clk $end
  $var wire  1 \ rst $end
  $scope module simplecpu $end
   $var wire 32 a A [31:0] $end
   $var wire 32 _ ADDRESS_WIDTH [31:0] $end
   $var wire  1 L ALUctrl $end
   $var wire 32 ^ ALUout [31:0] $end
   $var wire  1 M ALUsrc $end
   $var wire 32 ` DATA_WIDTH [31:0] $end
   $var wire  1 J EQ $end
   $var wire 32 G ImmOp [31:0] $end
   $var wire  1 e ImmSrc $end
   $var wire 32 H PC [31:0] $end
   $var wire  1 I PCsrc $end
   $var wire  1 K RegWrite $end
   $var wire 32 ] a0 [31:0] $end
   $var wire  1 [ clk $end
   $var wire  5 d rd [4:0] $end
   $var wire  5 b rs1 [4:0] $end
   $var wire  5 c rs2 [4:0] $end
   $var wire  1 \ rst $end
   $scope module alu $end
    $var wire 32 _ ADDRESS_WIDTH [31:0] $end
    $var wire  3 N ALUctrl [2:0] $end
    $var wire 32 % ALUop1 [31:0] $end
    $var wire 32 O ALUop2 [31:0] $end
    $var wire 32 ^ ALUout [31:0] $end
    $var wire  1 M ALUsrc $end
    $var wire 32 ` DATA_WIDTH [31:0] $end
    $var wire  1 J EQ $end
    $var wire  1 K RegWrite $end
    $var wire 32 ] a0 [31:0] $end
    $var wire  1 [ clk $end
    $var wire 32 G immOp [31:0] $end
    $var wire  5 d rd [4:0] $end
    $var wire 32 & regOp2 [31:0] $end
    $var wire  5 b rs1 [4:0] $end
    $var wire  5 c rs2 [4:0] $end
    $scope module SelectSignal $end
     $var wire 32 O ALUop2 [31:0] $end
     $var wire  1 M ALUsrc $end
     $var wire 32 ` DATA_WIDTH [31:0] $end
     $var wire 32 G ImmOp [31:0] $end
     $var wire 32 & regOp2 [31:0] $end
    $upscope $end
    $scope module alulogic $end
     $var wire  3 N ALUctrl [2:0] $end
     $var wire 32 % ALUop1 [31:0] $end
     $var wire 32 O ALUop2 [31:0] $end
     $var wire 32 ^ ALUout [31:0] $end
     $var wire 32 ` DATA_WIDTH [31:0] $end
     $var wire  1 J EQ $end
    $upscope $end
    $scope module regfile $end
     $var wire 32 _ ADDRESS_WIDTH [31:0] $end
     $var wire 32 % ALUop1 [31:0] $end
     $var wire 32 ` DATA_WIDTH [31:0] $end
     $var wire 32 ^ WD3 [31:0] $end
     $var wire  1 K WE3 $end
     $var wire 32 ] a0 [31:0] $end
     $var wire  5 b ad1 [4:0] $end
     $var wire  5 c ad2 [4:0] $end
     $var wire  5 d ad3 [4:0] $end
     $var wire  1 [ clk $end
     $var wire 32 & regOp2 [31:0] $end
     $var wire 32 ' rom_array[0] [31:0] $end
     $var wire 32 1 rom_array[10] [31:0] $end
     $var wire 32 2 rom_array[11] [31:0] $end
     $var wire 32 3 rom_array[12] [31:0] $end
     $var wire 32 4 rom_array[13] [31:0] $end
     $var wire 32 5 rom_array[14] [31:0] $end
     $var wire 32 6 rom_array[15] [31:0] $end
     $var wire 32 7 rom_array[16] [31:0] $end
     $var wire 32 8 rom_array[17] [31:0] $end
     $var wire 32 9 rom_array[18] [31:0] $end
     $var wire 32 : rom_array[19] [31:0] $end
     $var wire 32 ( rom_array[1] [31:0] $end
     $var wire 32 ; rom_array[20] [31:0] $end
     $var wire 32 < rom_array[21] [31:0] $end
     $var wire 32 = rom_array[22] [31:0] $end
     $var wire 32 > rom_array[23] [31:0] $end
     $var wire 32 ? rom_array[24] [31:0] $end
     $var wire 32 @ rom_array[25] [31:0] $end
     $var wire 32 A rom_array[26] [31:0] $end
     $var wire 32 B rom_array[27] [31:0] $end
     $var wire 32 C rom_array[28] [31:0] $end
     $var wire 32 D rom_array[29] [31:0] $end
     $var wire 32 ) rom_array[2] [31:0] $end
     $var wire 32 E rom_array[30] [31:0] $end
     $var wire 32 F rom_array[31] [31:0] $end
     $var wire 32 * rom_array[3] [31:0] $end
     $var wire 32 + rom_array[4] [31:0] $end
     $var wire 32 , rom_array[5] [31:0] $end
     $var wire 32 - rom_array[6] [31:0] $end
     $var wire 32 . rom_array[7] [31:0] $end
     $var wire 32 / rom_array[8] [31:0] $end
     $var wire 32 0 rom_array[9] [31:0] $end
    $upscope $end
   $upscope $end
   $scope module cu $end
    $var wire 32 H A [31:0] $end
    $var wire 32 _ ADDRESS_WIDTH [31:0] $end
    $var wire  1 L ALUctrl $end
    $var wire  1 M ALUsrc $end
    $var wire 32 ` DATA_WIDTH [31:0] $end
    $var wire  1 J EQ $end
    $var wire 32 G ImmOp [31:0] $end
    $var wire  2 Q ImmSrc [1:0] $end
    $var wire  1 I PCsrc $end
    $var wire 32 P RD_instr [31:0] $end
    $var wire  1 K RegWrite $end
    $var wire  1 [ clk $end
    $var wire  5 d rd [4:0] $end
    $var wire  5 b rs1 [4:0] $end
    $var wire  5 c rs2 [4:0] $end
    $scope module controlunit $end
     $var wire  3 T ALUctrl [2:0] $end
     $var wire  1 M ALUsrc $end
     $var wire  1 J EQ $end
     $var wire  2 Q ImmSrc [1:0] $end
     $var wire  1 I PCsrc $end
     $var wire  1 K RegWrite $end
     $var wire  1 U branch $end
     $var wire  8 V ctrl [7:0] $end
     $var wire  3 S funct3 [2:0] $end
     $var wire  7 R op [6:0] $end
    $upscope $end
    $scope module instructionmemory $end
     $var wire 32 H A [31:0] $end
     $var wire 32 P RD [31:0] $end
     $var wire  1 [ clk $end
     $var wire 32 # rom_array[-1] [31:0] $end
     $var wire 32 $ rom_array[0] [31:0] $end
    $upscope $end
    $scope module signextend $end
     $var wire 32 G ImmOp [31:0] $end
     $var wire  2 Q ImmSrc [1:0] $end
     $var wire 25 W Instr [31:7] $end
    $upscope $end
   $upscope $end
   $scope module pc $end
    $var wire 32 G ImmOp [31:0] $end
    $var wire 32 H PC [31:0] $end
    $var wire  1 I PCsrc $end
    $var wire 32 Z branch_PC [31:0] $end
    $var wire  1 [ clk $end
    $var wire 32 Y inc_PC [31:0] $end
    $var wire 32 X next_PC [31:0] $end
    $var wire  1 \ rst $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
0I
0J
0K
0L
0M
b000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00 Q
b0000000 R
b000 S
b000 T
0U
b00000000 V
b0000000000000000000000000 W
b00000000000000000000000000000100 X
b00000000000000000000000000000100 Y
b00000000000000000000000000000000 Z
1[
1\
b00000000000000000000000000000000 ]
b00000000000000000000000000000000 ^
b00000000000000000000000000000101 _
b00000000000000000000000000100000 `
b00000000000000000000000000000000 a
b00000 b
b00000 c
b00000 d
0e
